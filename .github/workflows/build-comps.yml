name: Build Components

on:
  push:
  pull_request:

env:
  ESMF_VERSION: 'develop'
  STACK_DIR: ${{github.workspace}}/stack

jobs:
  build_components:
    name: Build Components
    runs-on: ubuntu-22.04

    steps:
    - name: Stack Directory Setup
      run: |
        mkdir -p ${STACK_DIR}/{include,lib,lib64,bin}
        export LD_LIBRARY_PATH=${STACK_DIR}/lib64:${STACK_DIR}/lib:${LD_LIBRARY_PATH}
        echo "STACK_DIR=${STACK_DIR}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "${STACK_DIR}/bin" >> $GITHUB_PATH
    - name: Software Version
      env:
        ESMF_API_URL: https://api.github.com/repos/esmf-org/esmf/releases/latest
      run: |
        if [[ "$ESMF_VERSION" == 'latest' ]]; then
          ESMF_API_URL=https://api.github.com/repos/esmf-org/esmf/releases/latest
          ESMF_VERSION=`curl --silent "${ESMF_API_URL}" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'`
          ESMF_URL=`curl --silent "${ESMF_API_URL}" | grep '"tarball_url":' | sed -E 's/.*"([^"]+)".*/\1/'`
        elif [[ "$ESMF_VERSION" == 'develop' ]]; then
          ESMF_API_URL=https://api.github.com/repos/esmf-org/esmf/commits/develop
          ESMF_VERSION=`curl --silent "${ESMF_API_URL}" | grep -m1 '"sha":' | sed -E 's/.*"([^"]+)".*/\1/'
          ESMF_URL=https://github.com/esmf-org/esmf/archive/${ESMF_VERSION}.tar.gz
          ESMF_VERSION=`echo ${ESMF_VERSION} | cut -c1-8`
        else
          ESMF_URL=https://github.com/esmf-org/esmf/archive/${ESMF_VERSION}.tar.gz        
        fi
        echo "ESMF_URL=${ESMF_URL}" >> $GITHUB_ENV
        echo "ESMF_VERSION=${ESMF_VERSION}" >> $GITHUB_ENV
    - name: Cache Dependencies
      id: cache-libraries
      uses: actions/cache@v3
      with:
        path: ${STACK_DIR}
        key: stack-${{runner.os}}-${{runner.arch}}-esmf@${{env.ESMF_VERSION}}
    - name: Install HDF5
      env:
        HDF5_TMP: ${{runner.temp}}/hdf5
        HDF5_URL: https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.2/src/hdf5-1.12.2.tar.gz
        CACHE_HIT: ${{steps.cache-build-dependencies.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" != 'true' ]]; then
          mkdir ${HDF5_TMP}
          cd ${HDF5_TMP}
          curl -L ${{env.HDF5_URL}} | tar --strip-components=2 -xz
          ./configure --quiet --enable-silent-rules --enable-fortran --prefix=$STACK_DIR
          make all install
        fi
        echo "HDF5_DIR=$STACK_DIR" >> $GITHUB_ENV
    - name: Install NetCDF-C
      env:
        NETCDF_C_TMP: ${{runner.temp}}/netcdf-c
        NETCDF_C_URL: https://github.com/Unidata/netcdf-c/archive/v4.9.0.tar.gz
        CACHE_HIT: ${{steps.cache-build-dependencies.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" != 'true' ]]; then
          mkdir ${NETCDF_C_TMP}
          cd ${NETCDF_C_TMP}
          curl -L ${{env.NETCDF_C_URL}} | tar --strip-components=1 -xz
          CPPFLAGS=-I${STACK_DIR}/include LDFLAGS=-L${STACK_DIR}/lib ./configure --quiet --enable-silent-rules --prefix=$STACK_DIR
          make all install
        fi
        echo "NETCDF_DIR=$STACK_DIR" >> $GITHUB_ENV
    - name: Install NetCDF-Fortran
      env:
        NETCDF_FORTRAN_TMP: ${{runner.temp}}/netcdf-fortran
        NETCDF_FORTRAN_URL: https://github.com/Unidata/netcdf-fortran/archive/v4.5.4.tar.gz
        CACHE_HIT: ${{steps.cache-build-dependencies.outputs.cache-hit}}
      run: |
        if [[ "$CACHE_HIT" != 'true' ]]; then
          mkdir ${NETCDF_FORTRAN_TMP}
          cd ${NETCDF_FORTRAN_TMP}
          curl -L ${{env.NETCDF_FORTRAN_URL}} | tar --strip-components=1 -xz
          CPPFLAGS=-I${STACK_DIR}/include LDFLAGS=-L${STACK_DIR}/lib ./configure --quiet --enable-silent-rules --prefix=${STACK_DIR}
          make all install
        fi
        echo "NETCDFF_DIR=$STACK_DIR" >> $GITHUB_ENV
    - name: Install ESMF
      env:
        ESMF_TMP: ${{runner.temp}}/esmf
        CACHE_HIT: ${{steps.cache-build-dependencies.outputs.cache-hit}}
        ESMF_COMM: "mpiuni"
        ESMF_COMPILER: "gfortran"
        ESMF_NETCDF: "nc-config"
        ESMF_NETCDF_LIBS: "-lnetcdf -lnetcdff"
        ESMF_INSTALL_MODDIR: "mod"
        ESMF_INSTALL_BINDIR: "bin"
        ESMF_INSTALL_LIBDIR: "lib"
        ESMF_INSTALL_PREFIX: "${STACK_DIR}"
      run: |
        if [[ "$CACHE_HIT" != 'true' ]]; then
          mkdir ${ESMF_TMP}
          cd ${ESMF_TMP}
          export ESMF_DIR=`pwd`
          curl -L ${{env.ESMF_URL}} | tar --strip-components=1 -xz
          make all install
        fi
        echo "ESMF_DIR=$STACK_DIR" >> $GITHUB_ENV
        echo "ESMFMKFILE=$STACK_DIR/lib/esmf.mk" >> $GITHUB_ENV
    - name: Build and Test
      run: |
        ESMX_Builder --test
